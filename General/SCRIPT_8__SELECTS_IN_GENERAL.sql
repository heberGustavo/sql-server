USE DB_BIBLIOTECA;

/******* Simple *******/
SELECT * FROM TB_LIVRO

/******* Ordering the data *******/
SELECT * 
FROM TB_LIVRO
ORDER BY LVR_ID DESC 

/******* With WHERE *******/
SELECT *
FROM TB_LIVRO
WHERE LVR_NOME = 'Using Samba'

SELECT *
FROM TB_LIVRO
WHERE LVR_NOME LIKE '%Linux%'

/******* WHERE with AND or OR*******/
SELECT *
FROM TB_LIVRO
WHERE LVR_NOME LIKE '%Linux%' AND LVR_PRECO > 63

/******* TOP *******/
SELECT TOP 3 * FROM TB_LIVRO

/******* ALIAS *******/
SELECT 
	LVR_ID AS MEU_ID
	, LVR_NOME AS NOME_LIVRO
	, LVR_DATA_PUB AS 'DATA DA PUBLICAÇÃO'
FROM TB_LIVRO


/******* UNION *******/
SELECT ATR_ID FROM TB_AUTOR
UNION 
SELECT EDT_ID FROM TB_EDITORA


SELECT ATR_ID FROM TB_AUTOR
UNION ALL
SELECT EDT_ID FROM TB_EDITORA


/******* COUNT *******/
SELECT COUNT(*) AS QUANT_ITENS FROM TB_AUTOR

/******* MAX *******/
SELECT MAX(LVR_PRECO) AS PREÇO_MAXIMO FROM TB_LIVRO

/******* MIN *******/
SELECT MIN(LVR_PRECO) AS PREÇO_MINIMO FROM TB_LIVRO

/******* AVG *******/
SELECT AVG(LVR_PRECO) AS MÉDIA FROM TB_LIVRO

/******* SUM *******/
SELECT SUM(LVR_PRECO) AS SOMA_TOTAL FROM TB_LIVRO


/******* BETWEEN *******/
SELECT * FROM TB_LIVRO L WHERE L.LVR_PRECO BETWEEN 40 AND 60
SELECT * FROM TB_LIVRO L WHERE L.LVR_DATA_PUB BETWEEN '01-01-2004' AND '12-30-2009'


/******* LIKE and NOT LIKE *******/
-- %
SELECT * FROM TB_EDITORA WHERE EDT_NOME LIKE '%O%'
SELECT * FROM TB_EDITORA WHERE EDT_NOME LIKE '%Y'
SELECT * FROM TB_EDITORA WHERE EDT_NOME LIKE 'W%'
SELECT * FROM TB_EDITORA WHERE EDT_NOME NOT LIKE 'W%'

-- _ (sublinhado)
SELECT * FROM TB_LIVRO WHERE LVR_NOME LIKE '_I%' --Return all books that second letter is 'I'
SELECT * FROM TB_LIVRO WHERE LVR_NOME LIKE '_I__O%' --Items that second letter is 'I' and fifth letter is 'O' 

--[]
SELECT * FROM TB_LIVRO WHERE LVR_NOME LIKE '[SL]%'  --Items that begin with 'S' or 'L'


/******* INNER JOIN *******/
SELECT L.LVR_ID, LVR_NOME, LVR_ISBN, LVR_DATA_PUB, E.EDT_ID, E.EDT_NOME, A.ATR_NOME
FROM TB_LIVRO L 
INNER JOIN TB_EDITORA E ON E.EDT_ID = L.EDT_ID
INNER JOIN TB_AUTOR A ON A.ATR_ID = L.ATR_ID


/******* LEFT JOIN *******/
--Inserting TB_LIVRO without ATR_ID
ALTER TABLE TB_LIVRO ALTER COLUMN ATR_ID SMALLINT NULL --To accept ATR_ID -> NULL
INSERT INTO TB_LIVRO (LVR_NOME, LVR_ISBN, LVR_DATA_PUB, LVR_PRECO, ATR_ID, EDT_ID) VALUES ('Book without ATR_ID', '11111', '2024-06-19', 19.64, NULL, 4)
INSERT INTO TB_LIVRO (LVR_NOME, LVR_ISBN, LVR_DATA_PUB, LVR_PRECO, ATR_ID, EDT_ID) VALUES ('Book without ATR_ID. v2', '22222', '2024-06-18', 34.64, NULL, 4)

/*Get all items, same that not exists ATR_ID in TB_AUTOR*/
SELECT * 
FROM TB_LIVRO L
LEFT JOIN TB_AUTOR A ON A.ATR_ID = L.ATR_ID

/*Get items that exists in TB_LIVRO and TB_AUTOR*/
SELECT * 
FROM TB_LIVRO L
RIGHT JOIN TB_AUTOR A ON A.ATR_ID = L.ATR_ID

/*Get all items that not exists ATR_ID*/
SELECT * 
FROM TB_LIVRO L
LEFT JOIN TB_AUTOR A ON A.ATR_ID = L.ATR_ID
WHERE L.ATR_ID IS NULL


/******* FULL JOIN *******/
SELECT *
FROM TB_AUTOR A
FULL JOIN TB_LIVRO L ON L.ATR_ID = A.ATR_ID 